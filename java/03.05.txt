03.05

객체지향

객체 - 클래스

클래스(선) -> 객(생성)

속성(멤버 변수)
기능(멤버 함수)
생성자

오버로딩 - 기존에 없는 새로운 메소드를 추가하는 것
(반환자료형, 함수명, 파라미터)


오버라이딩 - 상속받은 메소드를 재정의 하는 것
: 부모클래스로부터 상속받은 메소드를 자식 클래스에서 재정의
: 부모 클래스의 메소드를 재정의 하는 것으로 자식 클래서에서 오버라이딩하고자 하는 메소드의 이름, 변수, 리턴 값이 모두 같아야함

정보 은닉
- 접근 제어자 : private, default, protected, public
private > default > protected > public

- public : 모든 클래스(누구나) 접근 가능
- private : 해당 클래스(private이 붙은 변수, 메소드)에서만 접근 가능
- protected : 상속 관계를 가지는 경우에나 같은 패키지 내에 있을 때 접근 가능
- default : 접근 제어자를 별도로 설정하지 않으면 같은 패키지 내에 있을 때 접근 가능

- getter : 멤버 클래스 내에 있는 변수에 저장되어 있는 회원의 아이디값을 리턴
(public void setId(String Id) { this.Id = Id;})
- 외부에서 객체의 데이터를 읽을 때도 메소드를 사용

- setter : 멤버 클래스 내에 있는 변수에 회원의 아이디값을 저장
(public String getId() {return id;})
- 데이터는 외부에서 접근하지 않도록 막고,
메소드는 공개하여 외부에서 메소드를 통해 데이터에 접근하도록 유도

vo = view only

캡슐화(Encapsulation)?
- 서로 연관있는 속성과 기능들을 하나의 캡슐로 만들어 데이터를 외부로부터 보호함 
- 데이터와 알고리즘을 하나로 묶는 것
- 관련이 있는 변수와 함수를 하나의 클래스로 묶고 외부에서 쉽게 접근하지 
  못하도록 은닉 -> 데이터 은닉(data hiding)
- 객체에 직접적인 접근을 막고 내부의 정보에 직접접근 하거나 변경 X 
-> 데이터 보호(data protection)
  객체가 제공하는 필드와 메소드를 통해서만 접근 O
public > default > protected > private

this란?
- 객체 자신을 가리키는 래퍼런스 변수
- 자신의 객체에 접근할 때 사용(멤버 변수와 매개변수의 이름이 동일 시 구분)
- 인스턴스 자신의 주소를 반환할 때 사용
 

String Class (시험에 나올거임!!!)
- 한 번 생성되면 그 값을 읽기만 할 수 있고 변경하기 어려움
- 불변객체(immutable object)
- 문자열 대입 (바로 대입시키지 않고 new 연산자를 통해 객체 생성)

API ?

concat?
- String 클래스에서 제공하는 기본 메서드
- 주어진 문자열의 끝에 지정된 문자열을 추가한 다음 반환하고 형성된 
새 문자열을 반환
- 세개 이상의 문자열을 결합할 수 있음
- 문자열을 변경하지 않고 현재 문자열과 매개 변수로 전달된 문자열을 병함 및 새 문자열을 생성함
- 문자열을 한 번만 병합해야 할 때 사용

---------------------------------------------------------------------------
배열(Array)
- 동일한 타입의 여러 값을 저장할 수 있는 자료구조
- 배열 사용시 많은 양의 데이터를 적은 코드로 쉽게 처리할 수 있음
- 배열은 하나의 블록 안에 같은 타입인 데이터 여러 개를 모아 저장
- 각각의 값을 배열요소, 위치를 인덱스라 부름
- 배열은 공간의 개수(길이) 설정이 필수임
- 출력은 for문이나 Arrays.toString 사용
