03.06

static
- 클래스 레벨에서 선언되며 모든 인스턴스에 의해 공유됨
- 특정 데이터를 모든 인스턴스가 공유해야 할 때 유용
- 동일한 값을 유지해야 할 때 효과적
- 메모리 사용 최적화 할 수 있음
- 벗 변수가 필요한 경우에만 제한적으로 사용해야 함 왜냐 남용은 객체지향의 원칙에 어긋나고 메모리 관리 측에도 부정적인 영향을 끼침
- 인스턴스 생성 없이 클래스 이름을 통해 직접 호출 가능
- 연산에 주로 사용됨
- But 클래스의 다른 static 메소드나 변수만 접근 가능하며, 인스턴스로 접근해야 하는 경우 사용할 수 없음 (사용 시에는 이런 제한을 고려해야 함)
- 클래스가 처음 로드될 때 한 번만 실행되는 코드 
- 초기화 작업에 적합

-------------------------------------------------------------------------------
singleton Pattern(DBCP-DataBase Connection Pool)  - 셤에 나옴 (외워 이현정!)
- 하나의 인스턴스만 가지는 패턴
-  단하나의 유일한 객체를 만들기 위한 코드 패턴!
-> 메모리를 절약 하며 새로 만들지 않고 기존의 인스턴스를 가져와 활용함
- 모듈간의 의존성이 높아짐..

--------------------------------------------------------------------------------
절차
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
저장
--------------------------------------------------------------------------------
자료형 (정수, 실수, 단일문자, 문자열)
data(수) - 상수 ,  변수
-------------------------------------------------------------------------------
처리
-------------------------------------------------------------------------
연산자(기본, 대입, 복합대입, 논리, 삼항, 증감 등)
형변환
흐름제어문(if, switch, for, while 등)
-------------------------------------------------------------------------
객체
-------------------------------------------------------------------------------
일반 
- 객체 ? , Instance , 클래스 , JVM 메모리구조
객체구성요소
- 객체속성(멤버 변수 / 필드)
- 객체기능(멤버함수 / 생성자함수 / 함수오버로딩)
- static(관련 디자인패턴 : 싱글톤패턴)

자료구조
- 배열(원시타입 / 클래스타입)
- collection(List, Set, Map 등)
-------------------------------------------------------------------------------
상속(inheritance)
-------------------------------------------------------------------------------
- 상위클래스와 자식클래스가 있으며,
자식클래스는 부모클래스의 상속을 받아 그대로 사용 가능 함
- 이미 있는 것들 재사용 해서 만들수 있음
- 상속 받고자 하는 자식 클래스 명 옆에 extends 키워드를 붙이고 상속할
부모 클래스를 적음
- But 다중 상속을 허용하지 않아서 extends 뒤엔 하나의 부모 클래스만 올수 있음
- super : 부모생성자를 호출
(자식클래스에서 생성자 내부 첫줄에 super();를 선언해주어야 함)
