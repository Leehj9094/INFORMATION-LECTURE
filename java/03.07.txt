03.07

상속
upcasting : 

downcasting :

UpDownCastTestFunc()

추상클래스 추상 메서드(abstract)
- 작동되는 로직은 없지만 껍데기만 남아있는 메서드
- 선언부만 작성하고 구현부는 미완성인채 남겨둠 
(class Super{ 
	void func();		-> {}로 마무리 하지 않고 ;으로만 닫는
}
- 미완성으로 남겨 놓는 이유는 : 추상클래스를 상속받는 자식 클래스의 주제에 따라 상속받는 메서드의 내용이 달라지거나 상속받는 클래스에서 구현할 수 있도록 일부러 비워두는 개념
- 추상 클래스는 상속받는 자식클래스는 부모의 추상메서드를 상황에 맞게 적절히 재정의 하여 구현해서 사용이 가능해짐.
(abstract class Super{ 	abstract void func();	}

- 추상클래스에도 생성자가 있고 독립적인 인스턴스 멤버 변수 및 메서드도 가질 수 있음

이유 : 1. 구체적으로 어떻게 구현할지 결정되지 않았을때
2. 프로그램을 동일한 규격으로 만들 수 있도록 가이드 제공으로 사용

interface(인터페이스)
- 다중속성을 사용할 수 있게 
- 다른 클래스를 작성할 때 기본이 되는 틀을 제공하면서 다른 클래스 사이의 중간 매개 역할까지 담당하는 추상클래스!
- 인터페이스는 오로지!! 추상 메소드와 상수만 포함하고 있음
- 직접적으로 인스턴스를 생성 할 수 없듐
- 용도 : 1. 낮은 결합도 유지 2. 설계 사상을 코딩단계에서 구현
= 프로젝트 시 개발할 때 일관되고 정형화된 개발을 표준화 할 수 있으며 ,
클래스 작성 및 인터페이스의 구현까지 동시에 가능함(시간을 단축시켜줌)
클래스마다 각각의 독립적인 프로그래밍도 가능함
작업지시서



