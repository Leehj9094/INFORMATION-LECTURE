2.9


인터프리터 : 한줄로
컴파일 " 여러가지
일급함수 : 
java script : 웹브라우저 기능을 사용할 수 잇ㅇㅁ
data : 선저장 후 처리
alert(' ') - 연산자도 알아서 처리해줌 (ex: 10+20)을 넣으면 30으로 나타내줌
줄바꿈 : \n(역슬러시 n)
on 자체가 자바것을 불러오는 기능

a 태그에서는 javascript: 후에 
document(dom) : 현재 문서 내에서 나타내는 
object : 
innerHTML : 안에 내용값을 변경할 수 있음
. : chain 형 함수
` : 백틱 문자열로 나타냄
null : obj 자료형으로 공간을 사용하고 있음
undefined : 정의가 안되어있는 공간을 쓰고 있지 않는
- 선언 : 말그대로 변수나 함수, 클래스 등의 존재나 형태를 알리는 것을 의미
각 요소의 이름과 타입을 컴파일러에게 알려주기만 할 뿐 실제로 메모리를 할당하거나,
 실제 구현을 제공하지는 않음
- 정의 : 선언된 변수, 함수, 클래스등의 각 요소를 실제로 구현 하는 것을 의미 합니다. 
컴파일러는 이 때 메모리를 할당하고 값을 할당하거나 함수의 실제 동작을 구현

! : 띄어쓰기

true(참) : 1
false(거짓) : 0 ,null 

변수 : 
상수 :  

 보간법
        // 변수, 함수 호출 및 산술 표현식을 문자열에 직접 삽입할 수 있는 기능
        // ${value} 형식을 사용, 백틱(``)에만 사용 가능
        // ${보간법 적용 범위}

const : 저장된 위치에서만 가능 다른 곳에서 불러올수 없음

set : 저장되어 있는 정보를 아무대나 불어올수 있음
 
배열 : 배열에 자료를 담아내기 위한 구조

forEach : 만들어진 것을
arr.forEach((요소의 이름(item))=>{console.log()});

<button onclick="document.write('ABCD')">ADD</button> => 덮어써버림

02.11

docker		docker	docker	docker	docker
FN(React)		BN(SB) - DB(MYSQL - REDIS	스카우터/프로메테우스/?



// <br/> 제거
let replcedBrMenu = item.MNU.replaceALL'<br/>',"\n)
console.log("replacedBrMenu",replacedBrMenu);
// \n 기준으로 배열로 자르기
let menu_arr = replcedBrMenu.split("\n);
console.log(menu_arr);
// \n를 기준으로 잘린 배열의 재구성
menu_urr.map((menu)=>{
menu.trim{}; //앞뒤공백 제거
console.log(menu);
let splited_space = menu.split(' ');
console.log(splited_space)

//가격에 '원' 제거, ','제거 ,number 형변환
let removed_arr = splited_space.map((nemu_2)=>{
const
splited_space.map((menu_2)=>{
console.log(menu_2.match"/\d);

})
splited_space
});


02.12

ProtoType 
- 상속 : 상위객체가 가지고 있는 것을 하위객체에게 주는 것
최상위 클래스 : object
Object 객체 : 객체를 다루는 기본함수 제공
console.log(null); => null 자체가 뜸
console.log(typeof null); => Object로 변경되어 뜸


(Object.assign(obj,obj1,obj2) => obj 에 obj1 , obj2 k:v 를 복사


// Object.prototype  : 객체가 상속을 구현하는데 사용되는 메커니즘,Object객체 내에 구성

//    Object.prototype
//    자바스크립트의 모든 객체가 상속하는 프로토타입 체인의 최상위에 있는 객체입니다. 
//    따라서 Object.prototype에는 다양한 함수들이 정의되어 있습니다. 
//    일부 중요한 함수들은 다음과 같습니다:

//     toString(): 객체를 문자열로 변환하여 반환합니다.
//     hasOwnProperty(): 객체가 특정 속성을 직접 소유하고 있는지 여부를 확인합니다.
//     isPrototypeOf(): 객체가 다른 객체의 프로토타입 체인에 존재하는지 여부를 확인합니다.
//     valueOf(): 객체의 원시 값 표현을 반환합니다.
//     toLocaleString(): 객체를 지역화된 문자열로 변환하여 반환합니다.
//     propertyIsEnumerable(): 특정 속성이 열거 가능한 속성인지 여부를 확인합니다.
//     constructor: 객체를 생성한 생성자 함수를 참조합니다.

함수 : 데이터를 받아 특정 처리를 하는 논리적 공간
funtion : 
함수 내에서 받아서 쓸 수 있는 값을 사용하는 파라미터
new : 공간을 형성하기 위한
toSring : 편하게 콘솔로그를 안써도 자료를 불러올수 있게
class : 대상들을 구분하기 위해 만들어 놓은 객체

피연산자들은 연산자를 통ㅎㅐ서 연산이 됨
(5 + 3) 5와 3이 피연산자들
%(나머지) : 장점 
1 배수를 구할 수 있음
2 수의 범위 제한
3 짝홀수를 구할 수 있음
4 끝자리수 확인
논리연산자 : 결과값이 참이냐 아니야에 따라 true false 구분해줌
후치 연산자(다른 연산처리 우선)
전치 연산자(이 연산처리 우선)

비교 연산자 (이항연산자): 조건식 생성가능
== : 자료형 비교를 하지 않고 숫자형을 비교
=== : 자료형의 일치여부를 확인

조건식 && 조건식 : and 연산자 : 왼쪽조건식의 수행결과가 true일때 오른쪽 조건식을 실행
조건식같은 경우는 아무연산자나 가능함
console.log(!n5 && "n1안의 정수값은 true를 의미합니다."); => !를 넣어주는 경우 오른쪽 것을 들고옴 true로 인식함

삼항 조건 연산자 (Ternary Operator) 참거짓을 렌더링 할 수 있음
제일 많이 사용됨
조건식 : 조건식을 기준으로 a,b 코드처럼 나뉘지는
분기문 
번복문


02.13

함수
(data : 수를 외부로부터 받아와 처리하는 논리적 공간)
1. 절차지향 : 예로 if, for 등 함수를 구별하여 객체지향형으로 넘어감
--------------------------
인자 ㅇ, 리턴값 ㅇ
인자 x,   리턴값 ㅇ
인자 ㅇ,  리턴값 x				=> 4가지 형태로 나타낼 수 있음
인자 x,   리턴값 x
--------------------------

함수는 모듈화(탈부착이 가능한 장치)
 또는 
재사용성 증가에 사용됨
return은 하나의 자료형만 가능함

호이스팅(hoistiong)
   // 변수와 함수의 선언이 코드 실행전에 메모리에 미리 저장되는 현상
   // function 예약어 사용 시 호이스팅 처리됨
   // var 예약어 사용 시 호이스팅 처리됨

var변수는 가급적 사용은 지양(사용하지 않는게 좋음)
func은 목적에 따라서 사용여부 결정(처음에 만든 효과를 주고싶으면 사용)
func은 기본으로 이름부여도 가능(익명함수 or 이름부여된 함수 선택 가능)
화살표함수(()=>{})는 기본적으로 익명함수로 처리됨

스코프(SCOPE)란
 // 변수나 함수가 접군할 수 있는 범위
 // 전역스코프(Global Scope)와 지역 스코프(Local Scope)로 구별
 // 전역스코프 : 모든 지역에서 접근이 가능
 // 지역스코프 : 특정 영역( {} ) 에서만 접근 가능
 // - 함수스코프 : 함수 내에서 선언된 변수는 해당 함수내에서만 접근 가능 -> var
 // - 블록스코프 : 블록 내부에서만 접근 가능 (ex : if ,for, while ,,, object) -> let,const
 // - 렉시컬(Lexical)스코프 : 변수를 선언한 위치에 따라 스코프 결정(화살표함수) -> this

02.14

콜백함수(Call back)
  // 함수를 호출하는 시점이 바뀌어진 형태의 함수
  // 기본방식 : 사용자(개발자)가 함수를 직접정의 -> 정의된 함수를 호출(call)하여 결과를 반환받는 방식
  // callback : 콜백함수에 인자로 로직이 담긴 함수(함수주소)를 전달하여 콜백함수로부터 처리된 결과를 반환받는 방식
02.17

드래그 드립 이벤트
 // dragstart    : 드래그 시작(마우스를 클릭해서 끌어당김., 데이터 전달 설정)
        // drag         : 드래그 줌
        // dragenter    : 드래그가 대상 영역 위로 이동시 (요소가 드랍의 대상이 될때)
        // dragover     : 드래그가 대상 영역 위에 있는 동안 (요소가 드랍의 대상이 될때)
        // dragleave    : 드래그가 대상 영역에서 벗어남(요소가 드랍의 대상이 될때)
        // dragend      : 드래그 종료
        // drop         : 드랍처리(마우스를 땜. 데이터를 가져와 처리)


! 부정

02.18

키보드
KEYUP     : 키보드가 올라올때
키보드가 멈출때 작동
KEYDOWN   : 키보드가 내려갈때
키보드가 작동 시 작동
KEYPRESS  : 키보드를 계속 누를때
대문자 소문자 코드 구분

input                 : 텍스트 입력이 완료될때 발생(한글포함)
compositionstart      : 한글 조합 시작 시 발생
compositionupdate     : 한글 조합 중 발생(현재 조합 상태를 확인)
compositionend        : 한글 조합 완료 시 발생 (완성된 글자 확인)


Load이벤트
DOMContentLoaded  : 최초 1회 로드 시 동작
(HTML이 전부 파생된 이후 DOM객체가 완성되고 나서 실행 ,css, 외부파일 로드여부와는 관계없음)
load : 최초 document 로드 시 1회 동작
(모든 리소스가 완전히 로드된 이후 실행)

